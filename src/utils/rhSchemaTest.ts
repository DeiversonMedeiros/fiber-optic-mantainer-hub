import { coreSupabase, supabase, rhSupabase } from '@/integrations/supabase/client';

export const testRHSchemaAccess = async () => {
  console.log('üß™ TESTE DE ACESSO AO SCHEMA RH');
  console.log('=====================================');
  
  // Teste 1: Verificar se o cliente est√° configurado
  console.log('1Ô∏è‚É£ Verificando configura√ß√£o do cliente...');
  console.log('URL:', supabase.supabaseUrl);
  console.log('Chave:', supabase.supabaseKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada');
  
  // Teste 2: Tentar acessar a tabela employees do schema rh
  console.log('\n2Ô∏è‚É£ Testando acesso √† tabela rh.employees...');
  try {
    const { data, error } = await rhSupabase
      .from('employees')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro no acesso ao rh.employees:', error);
    } else {
      console.log('‚úÖ Sucesso no acesso ao rh.employees! Dados:', data);
    }
  } catch (err) {
    console.error('‚ùå Exce√ß√£o no acesso ao rh.employees:', err);
  }
  
  // Teste 3: Tentar acessar a tabela positions do schema rh
  console.log('\n3Ô∏è‚É£ Testando acesso √† tabela rh.positions...');
  try {
    const { data, error } = await rhSupabase
      .from('positions')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro no acesso ao rh.positions:', error);
    } else {
      console.log('‚úÖ Sucesso no acesso ao rh.positions! Dados:', data);
    }
  } catch (err) {
    console.error('‚ùå Exce√ß√£o no acesso ao rh.positions:', err);
  }
  
  // Teste 4: Verificar se h√° algum problema com o schema core
  console.log('\n4Ô∏è‚É£ Verificando configura√ß√£o do schema core...');
  try {
    const { data: coreData, error: coreError } = await coreSupabase
      .from('users')
      .select('*')
      .limit(1);
    
    if (coreError) {
      console.log('‚ÑπÔ∏è Tabela core.users n√£o acess√≠vel:', coreError.message);
    } else {
      console.log('‚úÖ Tabela core.users acess√≠vel');
    }
  } catch (err) {
    console.error('‚ùå Erro ao testar tabela core:', err);
  }
  
  // Teste 5: Verificar se o problema √© espec√≠fico do schema rh
  console.log('\n5Ô∏è‚É£ Testando diferentes abordagens para o schema rh...');
  
  // Tentativa com aspas duplas
  try {
    const { data, error } = await supabase
      .from('"rh"."employees"')
      .select('*')
      .limit(1);
    
    if (error) {
      console.log('‚ÑπÔ∏è rh."employees" com aspas:', error.message);
    } else {
      console.log('‚úÖ rh."employees" com aspas funcionou!');
    }
  } catch (err) {
    console.log('‚ÑπÔ∏è rh."employees" com aspas falhou:', err);
  }
  
  // Tentativa com schema expl√≠cito
  try {
    const { data, error } = await supabase
      .from('rh.employees')
      .select('*')
      .limit(1);
    
    if (error) {
      console.log('‚ÑπÔ∏è rh.employees:', error.message);
    } else {
      console.log('‚úÖ rh.employees funcionou!');
    }
  } catch (err) {
    console.log('‚ÑπÔ∏è rh.employees falhou:', err);
  }
  
  console.log('\n=====================================');
  console.log('üß™ TESTE CONCLU√çDO');
};
